// server.idl : IDL source the server
//
// Generated by the Visual Fortran COM Server Wizard on
// 08/08/05 at 17:24:41.
//
//  DO NOT EDIT THIS FILE!
//
// This file is re-generated every time the object hierarchy is changed.
//

// This file will be processed by the MIDL tool to
// produce the type library and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

// Interfaces for Diffraction
[
    object,
    uuid(44182096-CE96-4DC8-8D63-EC2FC6FA8D85) ,
    oleautomation ,
    dual
]
interface IDiffraction :  IDispatch {
    [id(13)] HRESULT x_vector_get (
         [in] long BeamID,
         [in, out] SAFEARRAY(double)* x_vector);
    [id(15)] HRESULT y_vector_get (
         [in] long BeamID,
         [in, out] SAFEARRAY(double)* y_vector);
    [id(18)] HRESULT wavefront_put (
         [in] SAFEARRAY(double) amp_r,
         [in] SAFEARRAY(double) amp_i,
         [in] double dx,
         [in] double dy,
         [in] double wavelength,
         [in] double curv,
         [in] long BeamID,
         [out, retval] long* status);
    [id(19)] HRESULT wavefront_get (
         [in] long BeamID,
         [in, out] SAFEARRAY(double)* amp_r,
         [in, out] SAFEARRAY(double)* amp_i);
    [id(63)] HRESULT CopyWavefront (
         [in] long BeamIDfrom,
         [in] long BeamIDto,
         [out, retval] long* status);
    [id(67)] HRESULT CopyWavefrontAmp (
         [in] long BeamIDAmp,
         [in] long BeamIDPhase,
         [out, retval] long* status);
    [id(64)] HRESULT SumWavefront (
         [in] long BeamID,
         [in] long BeamIDadd,
         [out, retval] long* status);
    [id(60)] HRESULT GetWavefrontParms (
         [in] long BeamID,
         [out] long* Nx,
         [out] long* Ny,
         [out] double* dx,
         [out] double* dy,
         [out] double* curv,
         [out] double* wavelength);
    [id(29)] HRESULT WriteWavefrontUNF (
         [in] BSTR StrFilename,
         [in] long BeamID,
         [out, retval] long* status);
    [id(38)] HRESULT ReadWavefrontUNF (
         [in] BSTR StrFilename,
         [in] long BeamID,
         [out, retval] long* status);
    [id(37)] HRESULT WavefrontPower (
         [out] double* power,
         [in] long BeamID);
    [id(23)] HRESULT CreateGausSource (
         [in] double BeamWaistDiam,
         [in] long Nx,
         [in] long Ny,
         [in] double dx,
         [in] double dy,
         [in] double wavelength,
         [in] long BeamID,
         [out, retval] long* status);
    [id(35)] HRESULT CreateTophatSource (
         [in] double BeamDiam,
         [in] long Nx,
         [in] long Ny,
         [in] double dx,
         [in] double dy,
         [in] double wavelength,
         [in] long BeamID,
         [out, retval] long* status);
    [id(68)] HRESULT ClearWavefront (
         [in] long BeamID,
         [out, retval] long* status);
    [id(22)] HRESULT ApplyMask (
         [in] double length_r,
         [in] double length_t,
         [in] double offset,
         [in] BSTR direction,
         [in] long BeamID,
         [out, retval] long* status);
    [id(44)] HRESULT ApplyMaskMisalign (
         [in] double length_r,
         [in] double length_t,
         [in] double offset,
         [in] double xc,
         [in] double yc,
         [in] BSTR direction,
         [in] long BeamID,
         [out, retval] long* status);
    [id(31)] HRESULT ApplyMaskGeneral (
         [in] double len_x,
         [in] double len_y,
         [in] double off_x,
         [in] double off_y,
         [in] long BeamID,
         [out, retval] long* status);
    [id(42)] HRESULT ApplyMaskPoly (
         [in] SAFEARRAY(double) vertices,
         [in] double xc,
         [in] double yc,
         [in] long BeamID,
         [out, retval] long* status);
    [id(36)] HRESULT ApplyMaskX (
         [in] double radius,
         [in] double length,
         [in] long BeamID,
         [out, retval] long* status);
    [id(39)] HRESULT ApplyMaskXRounded (
         [in] double radius,
         [in] double length,
         [in] double corner_rad,
         [in] long BeamID,
         [out, retval] long* status);
    [id(41)] HRESULT ApplyMaskRotate (
         [in] double length_r,
         [in] double length_t,
         [in] double offset,
         [in] double angle,
         [in] double xc,
         [in] double yc,
         [in] BSTR direction,
         [in] long BeamID,
         [out, retval] long* status);
    [id(66)] HRESULT ApplyMaskTilt (
         [in] double length_r,
         [in] double length_t,
         [in] double offset,
         [in] double rotangle,
         [in] double xc,
         [in] double yc,
         [in] double tiltangle,
         [in] double tiltorientation,
         [in] BSTR direction,
         [in] long BeamID,
         [out, retval] long* status);
    [id(24)] HRESULT Propagate (
         [in] double Distance,
         [in] long BeamID,
         [out, retval] long* status);
    [id(49)] HRESULT PropagateExt (
         [in] double Distance,
         [in] double dxout,
         [in] double dyout,
         [in] long applyCurv,
         [in] long BeamID,
         [out, retval] long* status);
    [id(53)] HRESULT PropagateDefDx (
         [in] double Distance,
         [in] long BeamID,
         [out, retval] long* status);
    [id(25)] HRESULT CornerCube (
         [in] double ccsize,
         [in] BSTR shape,
         [in] double xc,
         [in] double yc,
         [in] double spin,
         [in] SAFEARRAY(double) gapwidth,
         [in] SAFEARRAY(double) rotmatrix,
         [in] SAFEARRAY(double) dihedral,
         [in] SAFEARRAY(double) edgelength,
         [in] long BeamID,
         [out, retval] long* status);
    [id(3)] HRESULT focuslens (
         [in] double focuslens_f,
         [in] double focuslens_D,
         [in] double dxout,
         [in] double dyout,
         [in] long BeamID,
         [out, retval] long* status);
    [id(52)] HRESULT ThinLens (
         [in] double focallength,
         [in] double diameter,
         [in] double xc,
         [in] double yc,
         [in] long BeamID,
         [out, retval] long* status);
    [id(48)] HRESULT ReflectAsphere (
         [in] double rCurv,
         [in] double conicConst,
         [in] double diam,
         [in] double xDecenter,
         [in] double yDecenter,
         [in] double incidenceAngle,
         [in] double azimuth,
         [in] long applyCurv,
         [in] long BeamID,
         [out, retval] long* status);
    [id(47)] HRESULT PistonTiltFocus (
         [in] double piston,
         [in] double xtilt,
         [in] double ytilt,
         [in] double focus,
         [in] double xc,
         [in] double yc,
         [in] long BeamID,
         [out, retval] long* status);
    [id(65)] HRESULT PropagateToFocalPlane (
         [in] double lens_f,
         [in] double lens_D,
         [in] double dxout,
         [in] double dyout,
         [in] long applycurv,
         [in] long BeamID,
         [out, retval] long* status);
    [id(26)] HRESULT ClipCirc (
         [in] double Diameter,
         [in] double xc,
         [in] double yc,
         [in] double obscDiam,
         [in] long BeamID,
         [out, retval] long* status);
    [id(30)] HRESULT ClipRect (
         [in] double len_x,
         [in] double len_y,
         [in] double off_x,
         [in] double off_y,
         [in] long obscFlag,
         [in] long BeamID,
         [out, retval] long* status);
    [id(33)] HRESULT ClipPolygon (
         [in] SAFEARRAY(double) vertices,
         [in] double xc,
         [in] double yc,
         [in] double angle,
         [in] long BeamID,
         [out, retval] long* status);
    [id(34)] HRESULT ClipBWindow (
         [in] double winT,
         [in] double winA,
         [in] double xc,
         [in] double yc,
         [in] double rotAngle,
         [in] long BeamID,
         [out, retval] long* status);
    [id(54)] HRESULT AddThreadCommand (
         [in] long ThreadID,
         [in] long CmdID,
         [in] SAFEARRAY(double) rP,
         [in] SAFEARRAY(long) iP,
         [in] long pwAID,
         [in] long pwBID,
         [in] BSTR strP,
         [out, retval] long* flagStatus);
    [id(55)] HRESULT ExecuteThread (
         [in] long ThreadID,
         [out, retval] long* flagStatus);
    [id(56)] HRESULT ThreadStatus (
         [in] long ThreadID,
         [out, retval] long* flagStatus);
    [id(61)] HRESULT WaitForThread (
         [in] long ThreadID,
         [in] long TimeOutMS,
         [out, retval] long* WaitStatus);
    [id(62)] HRESULT WaitForMultipleThreads (
         [in] SAFEARRAY(long) pThreadID,
         [in] long TimeOutMS,
         [in] long flagWaitAll,
         [out, retval] long* WaitStatus);
    [id(57)] HRESULT ClearThread (
         [in] long ThreadID,
         [out, retval] long* flagStatus);
    [id(58), propget] HRESULT ThreadOPD (
         [in] long ThreadID,
         [in] long OPDID,
         [out, retval] double* VALUE);
    [id(59), propget] HRESULT ThreadPOW (
         [in] long ThreadID,
         [in] long POWID,
         [out, retval] double* VALUE);
};

// Type library defintion
[
    uuid(7FB676A4-8C3D-49A4-804D-073530B6B400),
    version(1.0),
    helpstring("Diffraction 1.0 Type Library")
]
library DiffractionLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(E4BF1897-350C-488F-B246-E14BAF2A0756),
        
    ]
    coclass Diffraction
    {
         [default] interface IDiffraction;
    };
};

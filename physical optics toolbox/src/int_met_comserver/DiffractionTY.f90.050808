!
!  DiffractionTY.f90 - This module contains definitions of the Diffraction class
!
!  Generated by the Visual Fortran COM Server Wizard on
!  08/01/05 at 17:23:47.
!
!   DO NOT EDIT THIS FILE!
!
!  This file is re-generated every time the object hierarchy is changed.
!

module Diffraction_Types

    use Diffraction_USE
    use dfwinty

    !  Strings used in registering class
    character*18, parameter :: Diffraction_CLASS_NAME = ("Diffraction Class")
    character*29, parameter :: Diffraction_PROGID = ("int_met_comserver.Diffraction")
    character*3,  parameter :: Diffraction_VERSION = ("1.0")
    character*10, parameter :: Diffraction_THREADING_MODEL = ("APARTMENT")

    ! CLSIDs        
    TYPE (GUID), PARAMETER :: CLSID_Diffraction = &
        GUID(#E4BF1897, #350C, #488F, &
        CHAR('B2'X)//CHAR('46'X)//CHAR('E1'X)//CHAR('4B'X)// &
        CHAR('AF'X)//CHAR('2A'X)//CHAR('07'X)//CHAR('56'X))
                                                
    ! IIDs      
    ! Per Interface
    TYPE (GUID), PARAMETER :: IID_IDiffraction = &
        GUID(#44182096, #CE96, #4DC8, &
        CHAR('8D'X)//CHAR('63'X)//CHAR('EC'X)//CHAR('2F'X)// &
        CHAR('C6'X)//CHAR('FA'X)//CHAR('8D'X)//CHAR('85'X))

    !  This is the per-instance data of the class
    ! Per Interface
    type IDiffraction_Ptr
        sequence
        type (IDiffraction_Vtbl), pointer :: pVtbl
        type (Diffraction_InternalData), pointer :: pInternalData
    end type IDiffraction_Ptr

    type Diffraction_InternalData
        sequence
        type (Diffraction_InstanceData), pointer :: pInstanceData
        type (Diffraction_Data), pointer :: pStart
        integer refCount
    end type Diffraction_InternalData

    type Diffraction_Data
        sequence
    ! Per Interface
        type (IDiffraction_ptr) IDiffraction_InternalData
        type (Diffraction_InternalData) InternalData
    end type Diffraction_Data

    ! Per Interface
    !  All methods must return integer(LONG) (an HRESULT)
    !  All methods must take as their first argument, the instance
    !  data type by reference
    type IDiffraction_Vtbl
        sequence
        ! IUnknown Methods
        integer(INT_PTR_KIND()) QueryInterface
        integer(INT_PTR_KIND()) AddRef
        integer(INT_PTR_KIND()) Release
        ! IDispatch Methods
        integer(INT_PTR_KIND()) GetTypeInfoCount
        integer(INT_PTR_KIND()) GetTypeInfo
        integer(INT_PTR_KIND()) GetIDsOfNames
        integer(INT_PTR_KIND()) Invoke
        !  IDiffraction Methods
        integer(INT_PTR_KIND()) get_dx
        integer(INT_PTR_KIND()) get_dy
        integer(INT_PTR_KIND()) get_wavelength
        integer(INT_PTR_KIND()) get_curvature
        integer(INT_PTR_KIND()) get_Nx
        integer(INT_PTR_KIND()) get_Ny
        integer(INT_PTR_KIND()) x_vector_get
        integer(INT_PTR_KIND()) y_vector_get
        integer(INT_PTR_KIND()) wavefront_put
        integer(INT_PTR_KIND()) wavefront_get
        integer(INT_PTR_KIND()) CopyWavefront
        integer(INT_PTR_KIND()) CopyWavefrontAmp
        integer(INT_PTR_KIND()) SumWavefront
        integer(INT_PTR_KIND()) GetWavefrontParms
        integer(INT_PTR_KIND()) WriteWavefrontUNF
        integer(INT_PTR_KIND()) ReadWavefrontUNF
        integer(INT_PTR_KIND()) WavefrontPower
        integer(INT_PTR_KIND()) ApplyMask
        integer(INT_PTR_KIND()) ApplyMaskMisalign
        integer(INT_PTR_KIND()) ApplyMaskGeneral
        integer(INT_PTR_KIND()) ApplyMaskPoly
        integer(INT_PTR_KIND()) ApplyMaskX
        integer(INT_PTR_KIND()) ApplyMaskXRounded
        integer(INT_PTR_KIND()) ApplyMaskRotate
        integer(INT_PTR_KIND()) ApplyMaskTilt
        integer(INT_PTR_KIND()) CreateGausSource
        integer(INT_PTR_KIND()) CreateTophatSource
        integer(INT_PTR_KIND()) Propagate
        integer(INT_PTR_KIND()) PropagateExt
        integer(INT_PTR_KIND()) PropagateDefDx
        integer(INT_PTR_KIND()) CornerCube
        integer(INT_PTR_KIND()) focuslens
        integer(INT_PTR_KIND()) ThinLens
        integer(INT_PTR_KIND()) ReflectAsphere
        integer(INT_PTR_KIND()) PistonTiltFocus
        integer(INT_PTR_KIND()) PropagateToFocalPlane
        integer(INT_PTR_KIND()) ClipCirc
        integer(INT_PTR_KIND()) ClipRect
        integer(INT_PTR_KIND()) ClipPolygon
        integer(INT_PTR_KIND()) ClipBWindow
        integer(INT_PTR_KIND()) AddThreadCommand
        integer(INT_PTR_KIND()) ExecuteThread
        integer(INT_PTR_KIND()) ThreadStatus
        integer(INT_PTR_KIND()) WaitForThread
        integer(INT_PTR_KIND()) WaitForMultipleThreads
        integer(INT_PTR_KIND()) ClearThread
        integer(INT_PTR_KIND()) get_ThreadOPD
        integer(INT_PTR_KIND()) get_ThreadPOW
    end type IDiffraction_Vtbl

  contains

    !  IUnknown implementation for all interfaces of the class

    function Diffraction_QueryInterface (pData, riid, ppv) result (r)
    !DEC$ ATTRIBUTES STDCALL :: Diffraction_QueryInterface
        use dfwinty
        use dfcom
        implicit none

        type (IDiffraction_Ptr) pData
        !dec$ attributes reference :: pData
        type(GUID), INTENT(IN) :: riid
        !dec$ attributes reference :: riid
        integer(INT_PTR_KIND()), INTENT(OUT) :: ppv
        !dec$ attributes reference :: ppv
        integer(LONG) r

        r = S_OK
        ppv = NULL

        !  Ensure that they are requesting a supported interface
        !  NOTE:  All requests for IUnknown MUST return the same pointer (per COM)
        if (COMIsEqualGUID(riid, IID_IUnknown)) then
            ppv = loc(pData % pInternalData % pStart % IDiffraction_InternalData)
        !  Per interface
        else if (COMIsEqualGUID(riid, IID_IDiffraction)) then
            ppv = loc(pData % pInternalData % pStart % IDiffraction_InternalData)
        else if (COMIsEqualGUID(riid, IID_IDispatch)) then
            ppv = loc(pData % pInternalData % pStart % IDiffraction_InternalData)
        end if

        if (ppv == NULL) then
            r = E_UNEXPECTED 
            return
        end if

        pData % pInternalData % refCount = &
            pData % pInternalData % refCount + 1

    end function 

    function Diffraction_AddRef (pData) result (r)
    !DEC$ ATTRIBUTES STDCALL :: Diffraction_AddRef
        use dfwinty
        implicit none

        type (IDiffraction_Ptr) pData
        !dec$ attributes reference :: pData
        integer r

        pData % pInternalData % refCount = &
            pData % pInternalData % refCount + 1
        r = pData % pInternalData % refCount

    end function 

    function Diffraction_Release (pData) result (r)
    !DEC$ ATTRIBUTES STDCALL :: Diffraction_Release
        use dfwinty
        use int_met_comserver_global
        implicit none

        type (IDiffraction_Ptr) pData
        !dec$ attributes reference :: pData
        integer r

        type (Diffraction_Data),  pointer :: pDiffractionData
        integer status

        pData % pInternalData % refCount = &
            pData % pInternalData % refCount - 1
        r = pData % pInternalData % refCount
        if (pData % pInternalData % refCount == 0) then
            !  Time to delete ourself....
            pDiffractionData => pData % pInternalData % pStart
            !  Call the "destructor"
            call Diffraction_DESTRUCTOR(pDiffractionData % InternalData % pInstanceData)
            !  Per interface
            deallocate (pDiffractionData % IDiffraction_InternalData % pVtbl)
            deallocate (pDiffractionData % InternalData % pInstanceData)
            deallocate (pDiffractionData)
            status = ServerUnlock()
        end if

    end function 


    !  IDispatch implementation for IDiffraction

    function Diffraction_GetTypeInfoCount(pData, pctinfo) result (hresult)
        !DEC$ ATTRIBUTES STDCALL :: Diffraction_GetTypeInfoCount
        implicit none
        type (IDiffraction_Ptr) pData
        !dec$ attributes reference :: pData
        integer(LONG), INTENT(OUT) :: pctinfo
        !dec$ attributes reference :: pctinfo
        integer(LONG) hresult

        hresult = S_OK
        pctinfo = 1

    end function

    function Diffraction_GetTypeInfo(pData, iTInfo, lcid, ppTInfo) result (hresult)
        !DEC$ ATTRIBUTES STDCALL :: Diffraction_GetTypeInfo
        use dfwinty
        use int_met_comserver_global
        use kernel32
        use oleaut32
        use dfcom
        implicit none
        type (IDiffraction_Ptr) pData
        !dec$ attributes reference :: pData
        integer, INTENT(IN) :: iTInfo
        !dec$ attributes value :: iTInfo
        integer, INTENT(IN) :: lcid
        !dec$ attributes value :: lcid
        integer(INT_PTR_KIND()), INTENT(OUT) :: ppTInfo
        !dec$ attributes reference :: ppTInfo
        integer(LONG) hresult

        interface
            function GetTypeInfoOfGuid(pITypeLib, rguid, ppTInfo) result (hresult)
            !DEC$ ATTRIBUTES DEFAULT :: GetTypeInfoOfGuid
            !DEC$IF DEFINED(_X86_)
            !DEC$ ATTRIBUTES STDCALL, ALIAS:'_GetTypeInfoOfGuid@8' :: GetTypeInfoOfGuid
            !DEC$ ELSE
            !DEC$ ATTRIBUTES STDCALL, ALIAS:'GetTypeInfoOfGuid' :: GetTypeInfoOfGuid
            !DEC$ ENDIF
                use dfwinty
                integer(INT_PTR_KIND()) pITypeLib
                !dec$ attributes value :: pITypeLib
                TYPE (GUID), INTENT(IN) :: rguid 
                !dec$ attributes reference :: rguid
                integer(INT_PTR_KIND()), INTENT(OUT) :: ppTInfo
                !dec$ attributes reference :: ppTInfo
                integer(LONG) hresult
            end function
        end interface
		POINTER(GetTypeInfoOfGuid_PTR, GetTypeInfoOfGuid)	! routine pointer

        integer(INT_PTR_KIND()) pITypeLib    ! ITypeLib*
		INTEGER(INT_PTR_KIND()) $VTBL		 ! ITypeLib Function Table
		POINTER($VPTR, $VTBL)
        integer res

        hresult = S_OK
        if (iTInfo /= 0) then
            hresult = TYPE_E_ELEMENTNOTFOUND
            return
        end if
        ppTInfo = gDiffractionITypeInfo
        
        !  Get the type information if we don't already have it
        !  NOTE:  This code will always return the ITypeInfo of the
        !         first LCID that is found
        if (gDiffractionITypeInfo == NULL) then
            call EnterCriticalSection(loc(gGlobalCriticalSection))
            if (gDiffractionITypeInfo == NULL) then
                hresult = LoadRegTypeLib(GUID_TypeLib_int_met_comserver, 1, 0, lcid, pITypeLib)
                if (hresult < 0) then
                    call LeaveCriticalSection(loc(gGlobalCriticalSection))
                    return
                end if
				$VPTR = pITypeLib
				$VPTR = $VTBL + (6 * INT_PTR_KIND()) ! Add GetTypeInfoOfGuid routine offset
				GetTypeInfoOfGuid_PTR = $VTBL
                hresult = GetTypeInfoOfGuid(pITypeLib, IID_IDiffraction, gDiffractionITypeInfo)
                res = COMReleaseObject(pITypelib)
                if (hresult < 0) then
                    call LeaveCriticalSection(loc(gGlobalCriticalSection))
                    return
                end if
            end if
            call LeaveCriticalSection(loc(gGlobalCriticalSection))
            ppTInfo = gDiffractionITypeInfo
        end if
        res = COMAddObjectReference(gDiffractionITypeInfo)

    end function

    function Diffraction_GetIDsOfNames(pData, riid, rgszNames, cNames, lcid, rgDispID) result (hresult)
        !DEC$ ATTRIBUTES STDCALL :: Diffraction_GetIDsOfNames
        use dfwinty
        use int_met_comserver_global
        use dfcom
        implicit none
        type (IDiffraction_Ptr) pData
        !dec$ attributes reference :: pData
        TYPE (GUID), INTENT(IN)    :: riid 
        !dec$ attributes reference :: riid
        integer(INT_PTR_KIND()), INTENT(IN) :: rgszNames
        !dec$ attributes value :: rgszNames
        integer, INTENT(IN) :: cNames
        !dec$ attributes value :: cNames
        integer, INTENT(IN) :: lcid
        !dec$ attributes value :: lcid
        integer(LONG), DIMENSION(:), INTENT(OUT) :: rgDispID
        !dec$ attributes reference :: rgDispID
        integer(LONG) hresult

        interface
            function DispGetIDsOfNames(pITypeInfo, rgszNames, cNames, rgDispID) result (hresult)
            !DEC$ ATTRIBUTES DEFAULT :: DispGetIDsOfNames
            !DEC$IF DEFINED(_X86_)
            !DEC$ ATTRIBUTES STDCALL, ALIAS:'_DispGetIDsOfNames@16' :: DispGetIDsOfNames
            !DEC$ ELSE
            !DEC$ ATTRIBUTES STDCALL, ALIAS:'DispGetIDsOfNames' :: DispGetIDsOfNames
            !DEC$ ENDIF
                use dfwinty
                integer(INT_PTR_KIND()) pITypeInfo
                !dec$ attributes value :: pITypeInfo
                integer(INT_PTR_KIND()), INTENT(IN) :: rgszNames
                !dec$ attributes value :: rgszNames
                integer, INTENT(IN) :: cNames
                !dec$ attributes value :: cNames
                integer(LONG), DIMENSION(:), INTENT(OUT) :: rgDispID
                !dec$ attributes reference :: rgDispID
                integer(LONG) hresult
            end function
        end interface

   		TYPE (GUID), PARAMETER :: IID_NULL = &
			GUID(#00000000, #0000, #0000, &
			  CHAR('00'X)//CHAR('00'X)//CHAR('00'X)//CHAR('00'X)// &
			  CHAR('00'X)//CHAR('00'X)//CHAR('00'X)//CHAR('00'X))
        integer(INT_PTR_KIND()) pTInfo 
        integer res

        hresult = S_OK

        !  The riid argument must be IID_NULL
        if (.not. COMIsEqualGUID(riid, IID_NULL)) then
            hresult = DISP_E_UNKNOWNINTERFACE
            return
        end if

        !  Get the ITypeInfo pointer
        hresult = Diffraction_GetTypeInfo(pData, 0, lcid, pTInfo)
        if (hresult < 0) return

        !  Call DispGetIDsOfNames
        hresult = DispGetIDsOfNames(pTInfo, rgszNames, cNames, rgDispID)
        res = COMReleaseObject(pTInfo)

    end function

    function Diffraction_Invoke(pData, dispidMember, riid, lcid, &
        wFlags, pparams, pvarResult, pexcepinfo, puArgErr) result (hresult)
        !DEC$ ATTRIBUTES STDCALL :: Diffraction_Invoke
        use dfwinty
        use int_met_comserver_global
        use dfcom
        implicit none
        type (IDiffraction_Ptr) pData
        !dec$ attributes reference :: pData
        integer(LONG), INTENT(IN) :: dispidMember
        !dec$ attributes value :: dispidMember
        TYPE (GUID), INTENT(IN)    :: riid 
        !dec$ attributes reference :: riid
        integer, INTENT(IN) :: lcid
        !dec$ attributes value :: lcid
        integer(2), INTENT(IN) :: wFlags
        !dec$ attributes value :: wFlags
        TYPE(T_DISPPARAMS), INTENT(INOUT) :: pparams
        !dec$ attributes reference :: pparams
        TYPE(VARIANT), INTENT(OUT) :: pvarResult
        !dec$ attributes reference :: pvarResult
        TYPE(T_EXCEPINFO), INTENT(OUT) :: pexcepinfo
        !dec$ attributes reference :: pexcepinfo
        integer, INTENT(OUT) :: puArgErr
        !dec$ attributes reference :: puArgErr
        integer(LONG) hresult

        interface
            function DispInvoke(pInterface, pTInfo, dispidMember, &
                wFlags, pparams, pvarResult, pexcepinfo, puArgErr) result (hresult)
            !DEC$ ATTRIBUTES DEFAULT :: DispInvoke
            !DEC$IF DEFINED(_X86_)
            !DEC$ ATTRIBUTES STDCALL, ALIAS:'_DispInvoke@32' :: DispInvoke
            !DEC$ ELSE
            !DEC$ ATTRIBUTES STDCALL, ALIAS:'DispInvoke' :: DispInvoke
            !DEC$ ENDIF
                use dfwinty
                integer(INT_PTR_KIND()) pInterface
                !dec$ attributes value :: pInterface
                integer(INT_PTR_KIND()) pTInfo
                !dec$ attributes value :: pTInfo
                integer(LONG), INTENT(IN) :: dispidMember
                !dec$ attributes value :: dispidMember
                integer(2), INTENT(IN) :: wFlags
                !dec$ attributes value :: wFlags
                TYPE(T_DISPPARAMS), INTENT(INOUT) :: pparams
                !dec$ attributes reference :: pparams
                TYPE(VARIANT), INTENT(OUT) :: pvarResult
                !dec$ attributes reference :: pvarResult
                TYPE(T_EXCEPINFO), INTENT(OUT) :: pexcepinfo
                !dec$ attributes reference :: pexcepinfo
                integer, INTENT(OUT) :: puArgErr
                !dec$ attributes reference :: puArgErr
                integer(LONG) hresult
            end function
        end interface

   		TYPE (GUID), PARAMETER :: IID_NULL = &
			GUID(#00000000, #0000, #0000, &
			  CHAR('00'X)//CHAR('00'X)//CHAR('00'X)//CHAR('00'X)// &
			  CHAR('00'X)//CHAR('00'X)//CHAR('00'X)//CHAR('00'X))
        integer(INT_PTR_KIND()) pTInfo 
        integer res

        hresult = S_OK

        !  The riid argument must be IID_NULL
        if (.not. COMIsEqualGUID(riid, IID_NULL)) then
            hresult = DISP_E_UNKNOWNINTERFACE
            return
        end if

        !  Get the ITypeInfo pointer
        hresult = Diffraction_GetTypeInfo(pData, 0, lcid, pTInfo)
        if (hresult < 0) return

        !  Call DispInvoke
        hresult = DispInvoke(loc(pdata), pTInfo, dispidMember, &
                wFlags, pparams, pvarResult, pexcepinfo, puArgErr)
        res = COMReleaseObject(pTInfo)

    end function

end module



